#!/usr/bin/python

#  Script to handle the help and argument description of AP_runPipeline
#  I need to import the python app ozArgs.py into here
#
#   Author: Patricio F. Ortiz
#   Date:   February 15, 2019


import sys
import os.path
import datetime

import ozArgs

__name__ = "help_runPipeline"

nargs = len(sys.argv)
if nargs == 1:
    print "Usage {} command|script".format(__name__)
    sys.exit()


whatToDo = sys.argv[1]

theArgs = {}

if whatToDo == "command":

    cla = ozArgs.methods("main",theArgs)
    theArgs["main"] = cla
    
    cla.addMandatoryField("pipe-file","file_name", "string",
            "File with the pipeline instructions")
    cla.addMandatoryField("date-string","YYYY-mm-dd[:YYYY-MM-DD]", "string",
            "String to specify initial and final dates",
            eg="YYYY-mm-dd[:YYYY-MM-DD]")
    cla.addOptionalField("-exec","execute", "string",
            "Work in execute mode, ie, do things")
    cla.addOptionalField("-slave","slave", "string",
            "Run in slave mode")
    cla.addOptionalField("-verify","verify", "string",
            "Run heavy verifications")
    cla.addOptionalField("-help","help", "string",
            "Show help for AP_runPipeline")
    cla.addOptionalKV("-runid","Process-identifier", "string",
        "Special identifier for the run")
    cla.addOptionalKV("-walltime","walltime_in_hours", "float",
        "Walltime for HPC performance")
    cla.addOptionalKV("-maxmen","memory-size-in-MB", "float",
        "Memory upper limit for HPC performance")
    cla.addOptionalKV("VARIABLE_NAME","variable_value", "string",
        "Any number of global variables definitions")

    cla.addLabel("AP_runPipeline")
    cla.shortHelp("AP_runPipeline")
#    cla.shortHelp("main")

elif whatToDo == "script":
    scArgs = {}
    oargs = []
##    if($kind eq "parallel" or $kind eq "qsub"){
#    item = "parallel"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
#    item = "qsub"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "label" or $kind eq "milestone")[
    item = "label"
    oargs.append(item)
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    sca.addDescription("Creates a label for flow control purposes. See goto.")
    sca.addMandatoryField("label-name","label-name", "string",
            "The name of the label",
            example="label START_PART_TWO")
    item = "milestone"
    oargs.append(item)
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    sca.addDescription("Creates a label for flow control purposes. See goto.")
    sca.addMandatoryField("label-name","label-name", "string",
            "The name of the label",
            example="milestone START_PART_TWO")
##    ] elsif($kind eq "goto" or $kind eq "skipto")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "if" and lc($lastWord) eq "then")[ 
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "elseif" and lc($lastWord) eq "then")[ 
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "else")[ 
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "endif")[ 
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "sleep")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "awaitfor")[ # still to be tested...
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "addto" or $kind eq "+=")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "multiplyby" or $kind eq "*=")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "divideby" or $kind eq "/=")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "addtowalltime")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "scalewalltime")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "assignto" or $kind eq "define")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "loop")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "endloop" or $kind eq "pool")[
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "echo")[
    item = "echo"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Prints a message to the console")
    sca.addMandatoryField("msg","message words", "string",
            "A message composed of several words",
            example="{} I'm tired, this is so boring".format(item))
#    item = "xxx"
#    sca = ozArgs.methods(item, scArgs)
#    scArgs[item] = sca
#    oargs.append(item)
#    sca.addDescription("executes a command ALWAYS")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif($kind eq "mkdir")[
    item = "mkdir"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Create a new directory")
    sca.addMandatoryField("directory","/full/path/to/directory", "string",
            "Target directory.",
            example="{} /full/path/to/directory".format(item) )
##    ] elsif($kind eq "chdir")[
    item = "chdir"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Changes directory to the target directory")
    sca.addMandatoryField("directory","/full/path/to/directory", "string",
            "Target directory.",
            example="{} /full/path/to/directory".format(item) )
##    ] elsif($kind eq "exec")[
    item = "exec"
    oargs.append(item)
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    sca.addDescription("executes a command ALWAYS")
    sca.addMandatoryField("command","file_name", "string",
            "Command to execute plus its arguments. Redirection is allowed",
            example="exec unlink file-name")
##    ] elsif($kind eq "sexec")[
    item = "sexec"
    oargs.append(item)
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    sca.addDescription("executes a command if in -exec mode")
    sca.addMandatoryField("command","file_name", "string",
            "Command to execute plus its arguments. Redirection is allowed",
            example="sexec rm file-name")
##    ] elsif($kind eq "local-bg")[
    item = "local-bg"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("invokes the shell to execute a file in the background")
    sca.addMandatoryField("mode","mode", "string",
            "Mode to denote whether to wait or not for the execution to stop",
            pv=[["WAIT", "Wait for the command to finish", ""],
                ["NOWAIT", "Go to the next task immediately", ""] ])
    sca.addMandatoryField("fileName","file_name", "string",
            "File containing commands to be executed in sequence.",
            example="{} mode file-name".format(item) )
##    ] elsif($kind eq "local-bash")[
    item = "local-bash"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("invokes the shell to execute a file in the foreground")
    sca.addMandatoryField("fileName","file_name", "string",
            "File containing commands to be executed in sequence.",
            example="{} file-name".format(item) )
##    ] elsif ($kind eq "terminate" or ($kind eq "kill") or ($kind eq "stop"))[
    item = "terminate"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Terminates the execution completely, leaving a trace in the log file")

    item = "kill"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Terminates the execution completely, leaving a trace in the log file")

    item = "stop"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Terminates the execution completely, leaving a trace in the log file")

#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif ($kind eq "failure" or $kind eq "error" or $kind eq "fail")[
    item = "failure"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Appends an error message to the Errors' file")
    sca.addMandatoryField("msg","message words", "string",
            "A message composed of several words",
            example="{} something went wrong ".format(item))

    item = "error"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Appends an error message to the Errors' file")
    sca.addMandatoryField("msg","message words", "string",
            "A message composed of several words",
            example="{} something went very wrong ".format(item))

    item = "fail"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Appends an error message to the Errors' file")
    sca.addMandatoryField("msg","message words", "string",
            "A message composed of several words",
            example="{} something went utterly wrong ".format(item))

##    ] elsif (($kind eq "delete") or ($kind eq "remove") or ($kind eq "rm"))[
    item = "rm"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Remove or delete a file")
    sca.addMandatoryField("file-name","file_name", "string",
            "Removes file-name from the disk.",
            example="{} fileName".format(item))

    item = "remove"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Remove or delete a file")
    sca.addMandatoryField("file-name","file_name", "string",
            "Removes file-name from the disk.",
            example="{} fileName".format(item))

    item = "delete"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Remove or delete a file")
    sca.addMandatoryField("file-name","file_name", "string",
            "Removes file-name from the disk.",
            example="{} fileName".format(item))

#    ] elsif ($kind eq "cycle" or $kind eq "next")[ # into a task
    item = "cycle"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Skip lines between this point and the end of a loop")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
    item = "next"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Skip lines between this point and the end of a loop")
#    sca.addMandatoryField("command","file_name", "string",
#            "Command to execute plus its arguments. Redirection is allowed",
#            example="exec unlink file-name")
##    ] elsif ($kind eq "break")[
    item = "break"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("Flow control: jumps out of a loop")
##    ] elsif ($kind eq "email")[
    item = "email"
    sca = ozArgs.methods(item, scArgs)
    scArgs[item] = sca
    oargs.append(item)
    sca.addDescription("sends a message by email to the user defined by the variable NOTIFY")
    sca.addMandatoryField("msg","message", "string",
            "A set of words to be sent as an email",
            example="{} WTF? Something failed during this".format(item) )

    for arg in oargs:
        argo = scArgs[arg]
#       print arg
#       print "    ",argo.description
        argo.shortHelp("")

    pass
else:
    print "WTF?"
    print "arguments: ", sys.argv, nargs


sys.exit()



if nargs < 3:
    print "Usage: ", sys.argv[0], "description-file YYYY-MM-DD"
    sys.exit()

dataFile = sys.argv[1]
laDate = sys.argv[2]
e = os.path.isfile(dataFile)
if e == 0: 
    print dataFile, " does not exist. Quiting"
    sys.exit()

lynes = tuple(open(dataFile, 'r'))
forcePush = 1

lines = [line.rstrip('\n') for line in lynes]

fdict = {}

for l in lines:
    if "#" in l or l == "":
        continue
    key, val = l.split('=')
    fdict[key] = val
#    print key, val

user     = "dazghent"
kwd      = "be10mbre"
site     = "ftp.copernicus.vgt.vito.be"
site     = fdict["ftpsite"]
lpath    = fdict["localPath"]
rpath    = fdict["remotePath"]
mode     = fdict["dateDir"]
project  = fdict["project"]

if "product" in fdict:
    product  = fdict["product"]


dcomp = laDate.split("-")
remoteDir = rpath
year = dcomp[0]
month = dcomp[1]
day = dcomp[2]
dateTag =  "{}{}{}".format(year, month, day)
localDir =  lpath + "/{}{}{}-tmp".format(year, month, day)
if project == "ostia":
    localDir =  lpath + "/{}/{}".format(year, month)
    dateTag =  "{}{}{}".format(year, month, day)
    remoteDir = rpath + "/{}/{}".format(year, month)
elif project == "phobos":
    dateTag =  "{}{}".format(year, dcomp[3].zfill(3))
    localDir =  lpath + "/{}".format(year)
    remoteDir = rpath + "/{}".format(year)

#print "From: ", remoteDir, " to ", localDir
#print "DateTag: ", dateTag

root = []
rot = []
ftp = None
try:
#    print "try connection to ", site
#    ftp = FTP_TLS(site, user, kwd)
    #[host[, user[, passwd[, acct[, keyfile[, certfile[, context[, timeout]]]]]]]])
    ftp = FTP(site, user, kwd)
except Exception, e:
    print "ftp-error", e
#    ftp.close()
    sys.exit()
#    print "message after connection: ", ftp.error_reply

#print "attempting cwd ", remoteDir
try:
#    ftp.login(user=user, passwd=kwd)
    ftp.dir(root.append)
    ftp.retrlines('MLSD', rot.append)

#    ftp.cwd(remoteDir)
except Exception, q:
    print "ftp-erroR ", q
    ftp.close()
    sys.exit()
#    print "Exception caught message after cwd: ", ftp.error_reply

#print "managed to change to ", remoteDir

nextracted = 0;
for l in root:
    parts = l.split()
    name = parts[-1]
#    print "dirs: ", name, l
    ftp.cwd(name)
    sub1 = []
    ftp.dir(sub1.append)
    for l1 in sub1:
        parts = l1.split()
        name = parts[-1]
#        print "sub1: ", name, l1
        ftp.cwd(name)
        sub2 = []
        ftp.dir(sub2.append)
        for l2 in sub2:
            parts = l2.split()
            lasty = len(parts)-1
            name = parts[-1]
            size = parts[lasty-4]
            isize = int(size)
            if dateTag in name and not "xml" in name:
                # we can extract
#                print "sub2: ", name
                if not os.path.isdir(localDir):
                    os.makedirs(localDir)
                fileName = localDir + "/" + name
#        print fileName
                lFileSize = 0;
                if os.path.exists(fileName):
                    lFileSize = os.path.getsize(fileName)
                while lFileSize != isize:
                    file = open(fileName, 'w')
                    try: 
                        ftp.retrbinary('RETR '+name, file.write)
                        lFileSize = os.path.getsize(fileName)
                    except Exception, x:
                        print "ftp-error: ", x
                        ftp.close()
                        sys.exit()
                nextracted += 1
#            else: 
#                print "!SUB2: ", name


#for l in rot:
#    print "DIRS: ", l

#sys.exit()
#
#
#there = []
#ftp.dir(there.append)
#psizes = {1:1}
#nextracted = 0
#for line in there:
#    parts = line.split()
#    lasty = len(parts)-1
#    name = parts[lasty]
#    size = parts[lasty-4]
#    isize = int(size)
##    print line, "?"
##    if dateTag in line:
##        print name, isize
#         
##        print datetime.datetime.now()


ftp.close()
if nextracted > 0:
    print "Successful-ftp"
elif nextracted == 0:
    print "Nothing-to-retrieve"
else:
    print "Unsuccessful-ftp"


sys.exit()

